<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.VRModule</name>
    </assembly>
    <member name="T:UnityEngine.XR.InputTracking">
      <summary>
        <para>A collection of methods and properties for interacting with the XR tracking system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.InputTracking.disablePositionalTracking">
      <summary>
        <para>Disables positional tracking in XR. This takes effect the next time the head pose is sampled.  If set to true the camera only tracks headset rotation state.</para>
      </summary>
    </member>
    <member name="?:UnityEngine.XR.InputTracking.nodeAdded(System.Action`1&lt;UnityEngine.XR.XRNodeState&gt;)">
      <summary>
        <para>Called when a tracked node is added to the underlying XR system.</para>
      </summary>
      <param name="nodeState">Describes the node that has been added.</param>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.XR.InputTracking.nodeRemoved(System.Action`1&lt;UnityEngine.XR.XRNodeState&gt;)">
      <summary>
        <para>Called when a tracked node is removed from the underlying XR system.</para>
      </summary>
      <param name="nodeState">Describes the node that has been removed.</param>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.XR.InputTracking.trackingAcquired(System.Action`1&lt;UnityEngine.XR.XRNodeState&gt;)">
      <summary>
        <para>Called when a tracked node begins reporting tracking information.</para>
      </summary>
      <param name="nodeState">Describes the node that has begun being tracked.</param>
      <param name="value"></param>
    </member>
    <member name="?:UnityEngine.XR.InputTracking.trackingLost(System.Action`1&lt;UnityEngine.XR.XRNodeState&gt;)">
      <summary>
        <para>Called when a tracked node stops reporting tracking information.</para>
      </summary>
      <param name="nodeState">Describes the node that has lost tracking.</param>
      <param name="value"></param>
    </member>
    <member name="M:UnityEngine.XR.InputTracking.GetLocalPosition(UnityEngine.XR.XRNode)">
      <summary>
        <para>Gets the position of a specific node.</para>
      </summary>
      <param name="node">Specifies which node's position should be returned.</param>
      <returns>
        <para>The position of the node in its local tracking space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.InputTracking.GetLocalRotation(UnityEngine.XR.XRNode)">
      <summary>
        <para>Gets the rotation of a specific node.</para>
      </summary>
      <param name="node">Specifies which node's rotation should be returned.</param>
      <returns>
        <para>The rotation of the node in its local tracking space.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.InputTracking.GetNodeName(System.UInt64)">
      <summary>
        <para>Accepts the unique identifier for a tracked node and returns a friendly name for it.</para>
      </summary>
      <param name="uniqueID">The unique identifier for the Node index.</param>
      <returns>
        <para>The name of the tracked node if the given 64-bit identifier maps to a currently tracked node. Empty string otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.InputTracking.GetNodeStates">
      <summary>
        <para>Describes all presently connected XR nodes and provides available tracking state.</para>
      </summary>
      <param name="nodeStates">A list that is populated with XR.XRNodeState objects.</param>
    </member>
    <member name="M:UnityEngine.XR.InputTracking.Recenter">
      <summary>
        <para>Center tracking to the current position and orientation of the HMD.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.XR.TrackingSpaceType">
      <summary>
        <para>Represents the size of physical space available for XR.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.TrackingSpaceType.RoomScale">
      <summary>
        <para>Represents a space large enough for free movement.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.TrackingSpaceType.Stationary">
      <summary>
        <para>Represents a small space where movement may be constrained or positional tracking is unavailable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.XR.UserPresenceState">
      <summary>
        <para>Represents the current user presence state detected by the device.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.UserPresenceState.NotPresent">
      <summary>
        <para>The device does not detect that the user is present.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.UserPresenceState.Present">
      <summary>
        <para>The device detects that the user is present.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.UserPresenceState.Unknown">
      <summary>
        <para>The device is currently in a state where it cannot determine user presence.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.UserPresenceState.Unsupported">
      <summary>
        <para>The device does not support detecting user presence.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.XR.WSA.HolographicSettings">
      <summary>
        <para>The Holographic Settings contain functions which effect the performance and presentation of Holograms on Windows Holographic platforms.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.XR.WSA.HolographicSettings.ActivateLatentFramePresentation(System.Boolean)">
      <summary>
        <para>Option to allow developers to achieve higher framerate at the cost of high latency.  By default this option is off.</para>
      </summary>
      <param name="activated">True to enable or false to disable Low Latent Frame Presentation.</param>
    </member>
    <member name="T:UnityEngine.XR.WSA.HolographicSettings.HolographicReprojectionMode">
      <summary>
        <para>Represents the kind of reprojection an app is requesting to stabilize its holographic rendering relative to the user's head motion.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.WSA.HolographicSettings.HolographicReprojectionMode.Disabled">
      <summary>
        <para>The image should not be stabilized for the user's head motion, instead remaining fixed in the display. This is generally discouraged, as it is only comfortable for users when used sparingly, such as when the only visible content is a small cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.WSA.HolographicSettings.HolographicReprojectionMode.OrientationOnly">
      <summary>
        <para>The image should be stabilized only for changes to the user's head orientation, ignoring positional changes. This is best for body-locked content that should tag along with the user as they walk around, such as 360-degree video.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.WSA.HolographicSettings.HolographicReprojectionMode.PositionAndOrientation">
      <summary>
        <para>The image should be stabilized for changes to both the user's head position and orientation. This is best for world-locked content that should remain physically stationary as the user walks around.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.WSA.HolographicSettings.IsContentProtectionEnabled">
      <summary>
        <para>Whether the app is displaying protected content.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.WSA.HolographicSettings.IsLatentFramePresentation">
      <summary>
        <para>Returns true if Holographic rendering is currently running with Latent Frame Presentation.  Default value is false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.WSA.HolographicSettings.ReprojectionMode">
      <summary>
        <para>The kind of reprojection the app is requesting to stabilize its holographic rendering relative to the user's head motion.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.XR.WSA.PositionalLocatorState">
      <summary>
        <para>Indicates the lifecycle state of the device's spatial location system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.WSA.PositionalLocatorState.Activating">
      <summary>
        <para>The device is reporting its orientation and is preparing to locate its position in the user's surroundings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.WSA.PositionalLocatorState.Active">
      <summary>
        <para>The device is reporting its orientation and position in the user's surroundings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.WSA.PositionalLocatorState.Inhibited">
      <summary>
        <para>The device is reporting its orientation but cannot locate its position in the user's surroundings due to external factors like poor lighting conditions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.WSA.PositionalLocatorState.OrientationOnly">
      <summary>
        <para>The device is reporting its orientation and has not been asked to report its position in the user's surroundings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.WSA.PositionalLocatorState.Unavailable">
      <summary>
        <para>The device's spatial location system is not available.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.XR.WSA.WorldManager">
      <summary>
        <para>This class represents the state of the real world tracking system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.XR.XRDevice">
      <summary>
        <para>Contains all functionality related to a XR device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRDevice.family">
      <summary>
        <para>The name of the family of the loaded XR device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRDevice.fovZoomFactor">
      <summary>
        <para>Zooms the XR projection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRDevice.isPresent">
      <summary>
        <para>Successfully detected a XR device in working order.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRDevice.model">
      <summary>
        <para>Specific model of loaded XR device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRDevice.refreshRate">
      <summary>
        <para>Refresh rate of the display in Hertz.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRDevice.userPresence">
      <summary>
        <para>Indicates whether the user is present and interacting with the device.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.XR.XRDevice.DisableAutoXRCameraTracking">
      <summary>
        <para>Sets whether the camera passed in the first parameter is controlled implicitly by the XR Device</para>
      </summary>
      <param name="Camera">The camera that we wish to change behavior on</param>
      <param name="Disabled">True if the camera's transform is set externally. False if the camera is to be driven implicitly by XRDevice, </param>
      <returns>
        <para>Nothing.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRDevice.GetNativePtr">
      <summary>
        <para>This method returns an IntPtr representing the native pointer to the XR device if one is available, otherwise the value will be IntPtr.Zero.</para>
      </summary>
      <returns>
        <para>The native pointer to the XR device.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRDevice.GetTrackingSpaceType">
      <summary>
        <para>Returns the device's current TrackingSpaceType. This value determines how the camera is positioned relative to its starting position. For more, see the section "Understanding the camera" in.</para>
      </summary>
      <returns>
        <para>The device's current TrackingSpaceType.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRDevice.SetTrackingSpaceType(UnityEngine.XR.TrackingSpaceType)">
      <summary>
        <para>Sets the device's current TrackingSpaceType. Returns true on success. Returns false if the given TrackingSpaceType is not supported or the device fails to switch.</para>
      </summary>
      <param name="TrackingSpaceType">The TrackingSpaceType the device should switch to.</param>
      <param name="trackingSpaceType"></param>
      <returns>
        <para>True on success. False if the given TrackingSpaceType is not supported or the device fails to switch.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.XR.XRNode">
      <summary>
        <para>Enumeration of tracked XR nodes which can be updated by XR input.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.CenterEye">
      <summary>
        <para>Node representing a point between the left and right eyes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.GameController">
      <summary>
        <para>Represents a tracked game Controller not associated with a specific hand.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.HardwareTracker">
      <summary>
        <para>Represents a physical device that provides tracking data for objects to which it is attached.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.Head">
      <summary>
        <para>Node representing the user's head.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.LeftEye">
      <summary>
        <para>Node representing the left eye.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.LeftHand">
      <summary>
        <para>Node representing the left hand.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.RightEye">
      <summary>
        <para>Node representing the right eye.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.RightHand">
      <summary>
        <para>Node representing the right hand.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.XR.XRNode.TrackingReference">
      <summary>
        <para>Represents a stationary physical device that can be used as a point of reference in the tracked area.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.acceleration">
      <summary>
        <para>Sets the vector representing the current acceleration of the tracked node.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.angularAcceleration">
      <summary>
        <para>Sets the vector representing the current angular acceleration of the tracked node.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.angularVelocity">
      <summary>
        <para>Sets the vector representing the current angular velocity of the tracked node.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.nodeType">
      <summary>
        <para>The type of the tracked node as specified in XR.XRNode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.position">
      <summary>
        <para>Sets the vector representing the current position of the tracked node.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.rotation">
      <summary>
        <para>Sets the quaternion representing the current rotation of the tracked node.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.tracked">
      <summary>
        <para>
          Set to true if the node is presently being tracked by the underlying XR system,
and false if the node is not presently being tracked by the underlying XR system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.uniqueID">
      <summary>
        <para>The unique identifier of the tracked node.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRNodeState.velocity">
      <summary>
        <para>Sets the vector representing the current velocity of the tracked node.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.XR.XRNodeState.TryGetAcceleration">
      <summary>
        <para>Attempt to retrieve a vector representing the current acceleration of the tracked node.</para>
      </summary>
      <returns>
        <para>True if the acceleration was set in the output parameter. False if the acceleration is not available due to limitations of the underlying platform or if the node is not presently tracked.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRNodeState.TryGetAngularAcceleration(UnityEngine.Vector3&amp;)">
      <summary>
        <para>Attempt to retrieve a Vector3 representing the current angular acceleration of the tracked node.</para>
      </summary>
      <param name="angularAcceleration"></param>
      <returns>
        <para>True if the angular acceleration was set in the output parameter. False if the angular acceleration is not available due to limitations of the underlying platform or if the node is not presently tracked.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRNodeState.TryGetAngularVelocity(UnityEngine.Vector3&amp;)">
      <summary>
        <para>Attempt to retrieve a Vector3 representing the current angular velocity of the tracked node.</para>
      </summary>
      <param name="angularVelocity"></param>
      <returns>
        <para>True if the angular velocity was set in the output parameter. False if the angular velocity is not available due to limitations of the underlying platform or if the node is not presently tracked.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRNodeState.TryGetPosition">
      <summary>
        <para>Attempt to retrieve a vector representing the current position of the tracked node.</para>
      </summary>
      <returns>
        <para>True if the position was set in the output parameter. False if the position is not available due to limitations of the underlying platform or if the node is not presently tracked.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRNodeState.TryGetRotation">
      <summary>
        <para>Attempt to retrieve a quaternion representing the current rotation of the tracked node.</para>
      </summary>
      <returns>
        <para>True if the rotation was set in the output parameter. False if the rotation is not available due to limitations of the underlying platform or if the node is not presently tracked.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRNodeState.TryGetVelocity">
      <summary>
        <para>Attempt to retrieve a vector representing the current velocity of the tracked node.</para>
      </summary>
      <returns>
        <para>True if the velocity was set in the output parameter. False if the velocity is not available due to limitations of the underlying platform or if the node is not presently tracked.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.XR.XRSettings">
      <summary>
        <para>Global XR related settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.enabled">
      <summary>
        <para>Globally enables or disables XR for the application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.eyeTextureDesc">
      <summary>
        <para>Fetch the eye texture RenderTextureDescriptor from the active stereo device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.eyeTextureHeight">
      <summary>
        <para>The current height of an eye texture for the loaded device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.eyeTextureResolutionScale">
      <summary>
        <para>Controls the actual size of eye textures as a multiplier of the device's default resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.eyeTextureWidth">
      <summary>
        <para>The current width of an eye texture for the loaded device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.isDeviceActive">
      <summary>
        <para>Read-only value that can be used to determine if the XR device is active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.loadedDeviceName">
      <summary>
        <para>Type of XR device that is currently loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.occlusionMaskScale">
      <summary>
        <para>A scale applied to the standard occulsion mask for each platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.renderScale">
      <summary>
        <para>This field has been deprecated. Use XRSettings.eyeTextureResolutionScale instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.renderViewportScale">
      <summary>
        <para>Controls how much of the allocated eye texture should be used for rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.showDeviceView">
      <summary>
        <para>Mirror what is shown on the device to the main display, if possible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.supportedDevices">
      <summary>
        <para>Returns a list of supported XR devices that were included at build time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRSettings.useOcclusionMesh">
      <summary>
        <para>Specifies whether or not the occlusion mesh should be used when rendering. Enabled by default.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.XR.XRSettings.LoadDeviceByName(System.String)">
      <summary>
        <para>Loads the requested device at the beginning of the next frame.</para>
      </summary>
      <param name="deviceName">Name of the device from XRSettings.supportedDevices.</param>
      <param name="prioritizedDeviceNameList">Prioritized list of device names from XRSettings.supportedDevices.</param>
    </member>
    <member name="M:UnityEngine.XR.XRSettings.LoadDeviceByName(System.String[])">
      <summary>
        <para>Loads the requested device at the beginning of the next frame.</para>
      </summary>
      <param name="deviceName">Name of the device from XRSettings.supportedDevices.</param>
      <param name="prioritizedDeviceNameList">Prioritized list of device names from XRSettings.supportedDevices.</param>
    </member>
    <member name="T:UnityEngine.XR.XRStats">
      <summary>
        <para>Timing and other statistics from the XR subsystem.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.XR.XRStats.gpuTimeLastFrame">
      <summary>
        <para>Total GPU time utilized last frame as measured by the XR subsystem.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.XR.XRStats.TryGetDroppedFrameCount(System.Int32&amp;)">
      <summary>
        <para>Retrieves the number of dropped frames reported by the XR SDK.</para>
      </summary>
      <param name="droppedFrameCount">Outputs the number of frames dropped since the last update.</param>
      <returns>
        <para>True if the dropped frame count is available, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRStats.TryGetFramePresentCount(System.Int32&amp;)">
      <summary>
        <para>Retrieves the number of times the current frame has been drawn to the device as reported by the XR SDK.</para>
      </summary>
      <param name="framePresentCount">Outputs the number of times the current frame has been presented.</param>
      <returns>
        <para>True if the frame present count is available, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.XR.XRStats.TryGetGPUTimeLastFrame(System.Single&amp;)">
      <summary>
        <para>Retrieves the time spent by the GPU last frame, in seconds, as reported by the XR SDK.</para>
      </summary>
      <param name="gpuTimeLastFrame">Outputs the time spent by the GPU last frame.</param>
      <returns>
        <para>True if the GPU time spent last frame is available, false otherwise.</para>
      </returns>
    </member>
  </members>
</doc>
